//This file is autogenerated!!  Do not directly edit!
import React, { useState } from 'react'
import { Label, Input, Form, FormGroup, Col } from 'reactstrap'
import { getData } from '../../utils/service'
import LoadingButton from '../LoadingButton'
import {
  onChangeHOF,
  getValueAndOnChangeHOF,
  formOffset
} from '../../utils/form'
const { size, offset } = formOffset

const defaultFieldsDensity = {
  t: 1,
  numU: 128,
  numOde: 128,
  a: 0.3,
  sigma: 0.3,
  lambda: 100,
  correlation: 0.8,
  alpha: 1.1,
  mu: 1300,
  c: 100
}
const Density = ({ onSubmit, isLoading }) => {
  const [fields, setFields] = useState(defaultFieldsDensity)
  const onChange = onChangeHOF(fields, setFields)
  const getValueAndOnChange = getValueAndOnChangeHOF(fields, onChange)
  return (
    <Form
      onSubmit={onSubmit(fields, numFields =>
        getData(
          numFields,
          'https://e43exqgwxl.execute-api.us-east-1.amazonaws.com/prd/v1/ops/density'
        )
      )}
    >
      <FormGroup row>
        <Label for="t" md={offset}>
          Time Horizon
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="t"
            id="t"
            {...getValueAndOnChange('t')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="numU" md={offset}>
          Steps in U
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="1"
            name="numU"
            id="numU"
            {...getValueAndOnChange('numU')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="numOde" md={offset}>
          Steps in ODE
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="1"
            name="numOde"
            id="numOde"
            {...getValueAndOnChange('numOde')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="a" md={offset}>
          Speed
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="a"
            id="a"
            {...getValueAndOnChange('a')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="sigma" md={offset}>
          Volatility
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="sigma"
            id="sigma"
            {...getValueAndOnChange('sigma')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="lambda" md={offset}>
          Jump Frequency
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="lambda"
            id="lambda"
            {...getValueAndOnChange('lambda')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="correlation" md={offset}>
          Correlation
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="correlation"
            id="correlation"
            {...getValueAndOnChange('correlation')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="alpha" md={offset}>
          Alpha
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="alpha"
            id="alpha"
            {...getValueAndOnChange('alpha')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="mu" md={offset}>
          Shift (Stable)
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="mu"
            id="mu"
            {...getValueAndOnChange('mu')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="c" md={offset}>
          Scale (Stable)
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="c"
            id="c"
            {...getValueAndOnChange('c')}
          />
        </Col>
      </FormGroup>

      <LoadingButton isLoading={isLoading}>Submit</LoadingButton>
    </Form>
  )
}
const objSelect = { '/v1/ops/density': Density }
const endpoints = ['/v1/ops/density']
export default ({ onSubmit, isLoading, isVisible }) => {
  const [selectedEndpoint, setEndpoint] = useState(endpoints[0])
  return !isVisible ? null : (
    <>
      <FormGroup row>
        <Label for="selectEndpoint" md={offset}>
          Select Endpoint
        </Label>
        <Col md={size}>
          <Input
            type="select"
            name="selectEndpoint"
            id="selectEndpoint"
            value={selectedEndpoint}
            onChange={e => setEndpoint(e.target.value)}
          >
            <option value="/v1/ops/density">Density</option>
          </Input>
        </Col>
      </FormGroup>
      {React.createElement(objSelect[selectedEndpoint], {
        onSubmit,
        isLoading
      })}
    </>
  )
}
