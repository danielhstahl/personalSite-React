//This file is autogenerated!!  Do not directly edit!
import React, { useState } from 'react'
import { Label, Input, Form, FormGroup, Col } from 'reactstrap'
import { getData } from '../../utils/service'
import LoadingButton from '../LoadingButton'
import {
  onChangeHOF,
  getValueAndOnChangeHOF,
  formOffset
} from '../../utils/form'
const { size, offset } = formOffset

const defaultFieldsBond = {
  t: 10,
  r0: 0.04,
  a: 0.3,
  b: 0.05,
  sigma: 0.05,
  maturity: 1
}
const Bond = ({ onSubmit, isLoading }) => {
  const [fields, setFields] = useState(defaultFieldsBond)
  const onChange = onChangeHOF(fields, setFields)
  const getValueAndOnChange = getValueAndOnChangeHOF(fields, onChange)
  return (
    <Form
      onSubmit={onSubmit(fields, numFields =>
        getData(
          numFields,
          'https://4mf1valfp4.execute-api.us-east-1.amazonaws.com/prd/v1/market/histogram/bond'
        )
      )}
    >
      <FormGroup row>
        <Label for="t" md={offset}>
          Simulate to (days)
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="1"
            name="t"
            id="t"
            {...getValueAndOnChange('t')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="r0" md={offset}>
          Current short rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="r0"
            id="r0"
            {...getValueAndOnChange('r0')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="a" md={offset}>
          Mean reversion
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="a"
            id="a"
            {...getValueAndOnChange('a')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="b" md={offset}>
          Long run average rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="b"
            id="b"
            {...getValueAndOnChange('b')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="sigma" md={offset}>
          Volatility of rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="sigma"
            id="sigma"
            {...getValueAndOnChange('sigma')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="maturity" md={offset}>
          Bond maturity (years)
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="maturity"
            id="maturity"
            {...getValueAndOnChange('maturity')}
          />
        </Col>
      </FormGroup>

      <LoadingButton isLoading={isLoading}>Submit</LoadingButton>
    </Form>
  )
}
const defaultFieldsEdf = {
  t: 10,
  r0: 0.04,
  a: 0.3,
  b: 0.05,
  sigma: 0.05,
  maturity: 1,
  tenor: 0.25
}
const Edf = ({ onSubmit, isLoading }) => {
  const [fields, setFields] = useState(defaultFieldsEdf)
  const onChange = onChangeHOF(fields, setFields)
  const getValueAndOnChange = getValueAndOnChangeHOF(fields, onChange)
  return (
    <Form
      onSubmit={onSubmit(fields, numFields =>
        getData(
          numFields,
          'https://4mf1valfp4.execute-api.us-east-1.amazonaws.com/prd/v1/market/histogram/edf'
        )
      )}
    >
      <FormGroup row>
        <Label for="t" md={offset}>
          Simulate to (days)
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="1"
            name="t"
            id="t"
            {...getValueAndOnChange('t')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="r0" md={offset}>
          Current short rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="r0"
            id="r0"
            {...getValueAndOnChange('r0')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="a" md={offset}>
          Mean reversion
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="a"
            id="a"
            {...getValueAndOnChange('a')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="b" md={offset}>
          Long run average rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="b"
            id="b"
            {...getValueAndOnChange('b')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="sigma" md={offset}>
          Volatility of rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="sigma"
            id="sigma"
            {...getValueAndOnChange('sigma')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="maturity" md={offset}>
          EDF maturity (years)
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="maturity"
            id="maturity"
            {...getValueAndOnChange('maturity')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="tenor" md={offset}>
          Floating tenor
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="tenor"
            id="tenor"
            {...getValueAndOnChange('tenor')}
          />
        </Col>
      </FormGroup>

      <LoadingButton isLoading={isLoading}>Submit</LoadingButton>
    </Form>
  )
}
const defaultFieldsBondcall = {
  t: 10,
  r0: 0.04,
  a: 0.3,
  b: 0.05,
  sigma: 0.05,
  maturity: 1,
  underlying_maturity: 1.25,
  strike: 0.97
}
const Bondcall = ({ onSubmit, isLoading }) => {
  const [fields, setFields] = useState(defaultFieldsBondcall)
  const onChange = onChangeHOF(fields, setFields)
  const getValueAndOnChange = getValueAndOnChangeHOF(fields, onChange)
  return (
    <Form
      onSubmit={onSubmit(fields, numFields =>
        getData(
          numFields,
          'https://4mf1valfp4.execute-api.us-east-1.amazonaws.com/prd/v1/market/histogram/bondcall'
        )
      )}
    >
      <FormGroup row>
        <Label for="t" md={offset}>
          Simulate to (days)
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="1"
            name="t"
            id="t"
            {...getValueAndOnChange('t')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="r0" md={offset}>
          Current short rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="r0"
            id="r0"
            {...getValueAndOnChange('r0')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="a" md={offset}>
          Mean reversion
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="a"
            id="a"
            {...getValueAndOnChange('a')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="b" md={offset}>
          Long run average rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="b"
            id="b"
            {...getValueAndOnChange('b')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="sigma" md={offset}>
          Volatility of rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="sigma"
            id="sigma"
            {...getValueAndOnChange('sigma')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="maturity" md={offset}>
          Option maturity (years)
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="maturity"
            id="maturity"
            {...getValueAndOnChange('maturity')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="underlying_maturity" md={offset}>
          Maturity of underlying bond (years)
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="underlying_maturity"
            id="underlying_maturity"
            {...getValueAndOnChange('underlying_maturity')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="strike" md={offset}>
          Strike
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="strike"
            id="strike"
            {...getValueAndOnChange('strike')}
          />
        </Col>
      </FormGroup>

      <LoadingButton isLoading={isLoading}>Submit</LoadingButton>
    </Form>
  )
}
const defaultFieldsBondput = {
  t: 10,
  r0: 0.04,
  a: 0.3,
  b: 0.05,
  sigma: 0.05,
  maturity: 1,
  underlying_maturity: 1.25,
  strike: 0.97
}
const Bondput = ({ onSubmit, isLoading }) => {
  const [fields, setFields] = useState(defaultFieldsBondput)
  const onChange = onChangeHOF(fields, setFields)
  const getValueAndOnChange = getValueAndOnChangeHOF(fields, onChange)
  return (
    <Form
      onSubmit={onSubmit(fields, numFields =>
        getData(
          numFields,
          'https://4mf1valfp4.execute-api.us-east-1.amazonaws.com/prd/v1/market/histogram/bondput'
        )
      )}
    >
      <FormGroup row>
        <Label for="t" md={offset}>
          Simulate to (days)
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="1"
            name="t"
            id="t"
            {...getValueAndOnChange('t')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="r0" md={offset}>
          Current short rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="r0"
            id="r0"
            {...getValueAndOnChange('r0')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="a" md={offset}>
          Mean reversion
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="a"
            id="a"
            {...getValueAndOnChange('a')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="b" md={offset}>
          Long run average rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="b"
            id="b"
            {...getValueAndOnChange('b')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="sigma" md={offset}>
          Volatility of rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="sigma"
            id="sigma"
            {...getValueAndOnChange('sigma')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="maturity" md={offset}>
          Option maturity (years)
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="maturity"
            id="maturity"
            {...getValueAndOnChange('maturity')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="underlying_maturity" md={offset}>
          Maturity of underlying bond (years)
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="underlying_maturity"
            id="underlying_maturity"
            {...getValueAndOnChange('underlying_maturity')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="strike" md={offset}>
          Strike
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="strike"
            id="strike"
            {...getValueAndOnChange('strike')}
          />
        </Col>
      </FormGroup>

      <LoadingButton isLoading={isLoading}>Submit</LoadingButton>
    </Form>
  )
}
const defaultFieldsCaplet = {
  t: 10,
  r0: 0.04,
  a: 0.3,
  b: 0.05,
  sigma: 0.05,
  maturity: 1,
  tenor: 0.25,
  strike: 0.02
}
const Caplet = ({ onSubmit, isLoading }) => {
  const [fields, setFields] = useState(defaultFieldsCaplet)
  const onChange = onChangeHOF(fields, setFields)
  const getValueAndOnChange = getValueAndOnChangeHOF(fields, onChange)
  return (
    <Form
      onSubmit={onSubmit(fields, numFields =>
        getData(
          numFields,
          'https://4mf1valfp4.execute-api.us-east-1.amazonaws.com/prd/v1/market/histogram/caplet'
        )
      )}
    >
      <FormGroup row>
        <Label for="t" md={offset}>
          Simulate to (days)
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="1"
            name="t"
            id="t"
            {...getValueAndOnChange('t')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="r0" md={offset}>
          Current short rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="r0"
            id="r0"
            {...getValueAndOnChange('r0')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="a" md={offset}>
          Mean reversion
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="a"
            id="a"
            {...getValueAndOnChange('a')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="b" md={offset}>
          Long run average rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="b"
            id="b"
            {...getValueAndOnChange('b')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="sigma" md={offset}>
          Volatility of rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="sigma"
            id="sigma"
            {...getValueAndOnChange('sigma')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="maturity" md={offset}>
          Option maturity (years)
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="maturity"
            id="maturity"
            {...getValueAndOnChange('maturity')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="tenor" md={offset}>
          Floating tenor
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="tenor"
            id="tenor"
            {...getValueAndOnChange('tenor')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="strike" md={offset}>
          Strike
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="strike"
            id="strike"
            {...getValueAndOnChange('strike')}
          />
        </Col>
      </FormGroup>

      <LoadingButton isLoading={isLoading}>Submit</LoadingButton>
    </Form>
  )
}
const defaultFieldsSwap = {
  t: 10,
  r0: 0.04,
  a: 0.3,
  b: 0.05,
  sigma: 0.05,
  maturity: 1,
  tenor: 0.25,
  swap_rate: 0.02
}
const Swap = ({ onSubmit, isLoading }) => {
  const [fields, setFields] = useState(defaultFieldsSwap)
  const onChange = onChangeHOF(fields, setFields)
  const getValueAndOnChange = getValueAndOnChangeHOF(fields, onChange)
  return (
    <Form
      onSubmit={onSubmit(fields, numFields =>
        getData(
          numFields,
          'https://4mf1valfp4.execute-api.us-east-1.amazonaws.com/prd/v1/market/histogram/swap'
        )
      )}
    >
      <FormGroup row>
        <Label for="t" md={offset}>
          Simulate to (days)
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="1"
            name="t"
            id="t"
            {...getValueAndOnChange('t')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="r0" md={offset}>
          Current short rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="r0"
            id="r0"
            {...getValueAndOnChange('r0')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="a" md={offset}>
          Mean reversion
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="a"
            id="a"
            {...getValueAndOnChange('a')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="b" md={offset}>
          Long run average rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="b"
            id="b"
            {...getValueAndOnChange('b')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="sigma" md={offset}>
          Volatility of rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="sigma"
            id="sigma"
            {...getValueAndOnChange('sigma')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="maturity" md={offset}>
          Swap maturity (years)
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="maturity"
            id="maturity"
            {...getValueAndOnChange('maturity')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="tenor" md={offset}>
          Floating tenor
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="tenor"
            id="tenor"
            {...getValueAndOnChange('tenor')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="swap_rate" md={offset}>
          Swap rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="swap_rate"
            id="swap_rate"
            {...getValueAndOnChange('swap_rate')}
          />
        </Col>
      </FormGroup>

      <LoadingButton isLoading={isLoading}>Submit</LoadingButton>
    </Form>
  )
}
const defaultFieldsSwaption = {
  t: 10,
  r0: 0.04,
  a: 0.3,
  b: 0.05,
  sigma: 0.05,
  maturity: 1,
  tenor: 0.25,
  swap_rate: 0.02
}
const Swaption = ({ onSubmit, isLoading }) => {
  const [fields, setFields] = useState(defaultFieldsSwaption)
  const onChange = onChangeHOF(fields, setFields)
  const getValueAndOnChange = getValueAndOnChangeHOF(fields, onChange)
  return (
    <Form
      onSubmit={onSubmit(fields, numFields =>
        getData(
          numFields,
          'https://4mf1valfp4.execute-api.us-east-1.amazonaws.com/prd/v1/market/histogram/swaption'
        )
      )}
    >
      <FormGroup row>
        <Label for="t" md={offset}>
          Simulate to (days)
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="1"
            name="t"
            id="t"
            {...getValueAndOnChange('t')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="r0" md={offset}>
          Current short rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="r0"
            id="r0"
            {...getValueAndOnChange('r0')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="a" md={offset}>
          Mean reversion
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="a"
            id="a"
            {...getValueAndOnChange('a')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="b" md={offset}>
          Long run average rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="b"
            id="b"
            {...getValueAndOnChange('b')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="sigma" md={offset}>
          Volatility of rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="sigma"
            id="sigma"
            {...getValueAndOnChange('sigma')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="maturity" md={offset}>
          Swap maturity (years)
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="maturity"
            id="maturity"
            {...getValueAndOnChange('maturity')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="tenor" md={offset}>
          Floating tenor
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="tenor"
            id="tenor"
            {...getValueAndOnChange('tenor')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="swap_rate" md={offset}>
          Swap rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="swap_rate"
            id="swap_rate"
            {...getValueAndOnChange('swap_rate')}
          />
        </Col>
      </FormGroup>

      <LoadingButton isLoading={isLoading}>Submit</LoadingButton>
    </Form>
  )
}
const defaultFieldsAmericanswaption = {
  t: 10,
  r0: 0.04,
  a: 0.3,
  b: 0.05,
  sigma: 0.05,
  maturity: 1,
  tenor: 0.25,
  swap_rate: 0.02
}
const Americanswaption = ({ onSubmit, isLoading }) => {
  const [fields, setFields] = useState(defaultFieldsAmericanswaption)
  const onChange = onChangeHOF(fields, setFields)
  const getValueAndOnChange = getValueAndOnChangeHOF(fields, onChange)
  return (
    <Form
      onSubmit={onSubmit(fields, numFields =>
        getData(
          numFields,
          'https://4mf1valfp4.execute-api.us-east-1.amazonaws.com/prd/v1/market/histogram/americanswaption'
        )
      )}
    >
      <FormGroup row>
        <Label for="t" md={offset}>
          Simulate to (days)
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="1"
            name="t"
            id="t"
            {...getValueAndOnChange('t')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="r0" md={offset}>
          Current short rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="r0"
            id="r0"
            {...getValueAndOnChange('r0')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="a" md={offset}>
          Mean reversion
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="a"
            id="a"
            {...getValueAndOnChange('a')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="b" md={offset}>
          Long run average rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="b"
            id="b"
            {...getValueAndOnChange('b')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="sigma" md={offset}>
          Volatility of rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="sigma"
            id="sigma"
            {...getValueAndOnChange('sigma')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="maturity" md={offset}>
          Swap maturity (years)
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="maturity"
            id="maturity"
            {...getValueAndOnChange('maturity')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="tenor" md={offset}>
          Floating tenor
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="tenor"
            id="tenor"
            {...getValueAndOnChange('tenor')}
          />
        </Col>
      </FormGroup>

      <FormGroup row>
        <Label for="swap_rate" md={offset}>
          Swap rate
        </Label>
        <Col md={size}>
          <Input
            type="number"
            step="any"
            name="swap_rate"
            id="swap_rate"
            {...getValueAndOnChange('swap_rate')}
          />
        </Col>
      </FormGroup>

      <LoadingButton isLoading={isLoading}>Submit</LoadingButton>
    </Form>
  )
}
const objSelect = {
  '/v1/market/histogram/bond': Bond,
  '/v1/market/histogram/edf': Edf,
  '/v1/market/histogram/bondcall': Bondcall,
  '/v1/market/histogram/bondput': Bondput,
  '/v1/market/histogram/caplet': Caplet,
  '/v1/market/histogram/swap': Swap,
  '/v1/market/histogram/swaption': Swaption,
  '/v1/market/histogram/americanswaption': Americanswaption
}
const endpoints = [
  '/v1/market/histogram/bond',
  '/v1/market/histogram/edf',
  '/v1/market/histogram/bondcall',
  '/v1/market/histogram/bondput',
  '/v1/market/histogram/caplet',
  '/v1/market/histogram/swap',
  '/v1/market/histogram/swaption',
  '/v1/market/histogram/americanswaption'
]
export default ({ onSubmit, isLoading, isVisible }) => {
  const [selectedEndpoint, setEndpoint] = useState(endpoints[0])
  return !isVisible ? null : (
    <>
      <FormGroup row>
        <Label for="selectEndpoint" md={offset}>
          Select Endpoint
        </Label>
        <Col md={size}>
          <Input
            type="select"
            name="selectEndpoint"
            id="selectEndpoint"
            value={selectedEndpoint}
            onChange={e => setEndpoint(e.target.value)}
          >
            <option value="/v1/market/histogram/bond">Bond</option>
            <option value="/v1/market/histogram/edf">Edf</option>
            <option value="/v1/market/histogram/bondcall">Bondcall</option>
            <option value="/v1/market/histogram/bondput">Bondput</option>
            <option value="/v1/market/histogram/caplet">Caplet</option>
            <option value="/v1/market/histogram/swap">Swap</option>
            <option value="/v1/market/histogram/swaption">Swaption</option>
            <option value="/v1/market/histogram/americanswaption">
              Americanswaption
            </option>
          </Input>
        </Col>
      </FormGroup>
      {React.createElement(objSelect[selectedEndpoint], {
        onSubmit,
        isLoading
      })}
    </>
  )
}
